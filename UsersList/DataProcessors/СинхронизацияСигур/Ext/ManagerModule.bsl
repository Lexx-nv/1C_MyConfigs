Процедура ВыполнитьОбработкуИБ(пИнформационнаяБаза, пТабличныйДокумент = Неопределено) Экспорт
	мМассивТабличныхДокументов = Новый Массив;
	мОписаниеОшибки = "";
	Если СокрЛП(пИнформационнаяБаза.СтрокаСоединенияСигур) = "" Тогда
		#Если Клиент Тогда
			Сообщить("Невозможно обработать базу - строка соединения с Сигур пуста");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	// 1. Сотрудники
	//Получим таблицу работающих сотрудников
	мТаблицаСотрудников = ПолучитьСотрудников(пИнформационнаяБаза, мОписаниеОшибки);
	Если мТаблицаСотрудников = 1 Тогда //!!!ОШИБКА в регистр - вообще не получили список работающих из ЗУП
		мОписаниеОшибки = мОписаниеОшибки + Символы.ПС + "ЗУП. Не получены данные о работающих. Обработка базы прервана и не выполнена.";
		#Если Клиент Тогда
			Сообщить("Ошибка!" + мОписаниеОшибки);
		#КонецЕсли
		//ЗаписьВРегистрОтчета(ИнформационнаяБаза,ОписаниеОшибки);		
		Возврат;
	Иначе
		Если пТабличныйДокумент <> Неопределено Тогда
			мТабличныйДокумент = ВывестиТаблицуЗначенийВТабличныйДокумент(мТаблицаСотрудников);
			мМассивТабличныхДокументов.Добавить(мТабличныйДокумент)
		Иначе
			мВыгруженоУспешно = ВыгрузитьСотрудниковВСигур(пИнформационнаяБаза.Организация.Наименование, пИнформационнаяБаза.СтрокаСоединенияСигур, мТаблицаСотрудников, мОписаниеОшибки);
			Если Не мВыгруженоУспешно Тогда
				#Если Клиент Тогда
					Сообщить("Ошибка!" + мОписаниеОшибки);
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	// 2. ТранспортныеСредства
	мТаблицаТранспорта = ПолучитьТранспортныеСредства(пИнформационнаяБаза, мОписаниеОшибки);
	Если мТаблицаТранспорта = 1 Тогда
		мОписаниеОшибки = мОписаниеОшибки + Символы.ПС + "ЗУП. Не получены данные о работающих. Обработка базы прервана и не выполнена.";
		#Если Клиент Тогда
			Сообщить("Ошибка!" + мОписаниеОшибки);
		#КонецЕсли
		//ЗаписьВРегистрОтчета(ИнформационнаяБаза,ОписаниеОшибки);		
		Возврат;
	Иначе
		Если пТабличныйДокумент <> Неопределено Тогда
			мТабличныйДокумент = ВывестиТаблицуЗначенийВТабличныйДокумент(мТаблицаТранспорта);
			мМассивТабличныхДокументов.Добавить(мТабличныйДокумент);
		Иначе
			мВыгруженоУспешно = Ложь;
			мОписаниеОшибки = "Метод не реализован!";
			мВыгруженоУспешно = ВыгрузитьТранспортВСигур(пИнформационнаяБаза.Организация.Наименование, пИнформационнаяБаза.СтрокаСоединенияСигур, мТаблицаТранспорта, мОписаниеОшибки);
			Если Не мВыгруженоУспешно Тогда
				#Если Клиент Тогда
					Сообщить("Ошибка!" + мОписаниеОшибки);
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если пТабличныйДокумент <> Неопределено Тогда
		пТабличныйДокумент = мМассивТабличныхДокументов;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТранспортныеСредства(пИнформационнаяБаза, ТекстОшибки = "") Экспорт
	СткЗапроса = ОбщегоНазначения.ПолучитьСткЗапроса();
	ЗаполнитьЗначенияСвойств(СткЗапроса, пИнформационнаяБаза);
	СткЗапроса.ИмяМетода = "LISTTS";
	мОтвет = ОбщегоНазначения.ВыполнитьЗапрос(СткЗапроса);
	Если мОтвет = 1 Тогда
		Возврат мОтвет;
	Иначе
		Возврат мОтвет[1];
	КонецЕсли;
КонецФункции

Функция ПолучитьСотрудников(ИнформационнаяБаза, ТекстОшибки = "") Экспорт
	фПервая = Истина;
	Для Каждого ХХХ Из ИнформационнаяБаза.БазыЗУП Цикл
		СткЗапроса = ОбщегоНазначения.ПолучитьСткЗапроса();
		ЗаполнитьЗначенияСвойств(СткЗапроса,ХХХ.БазаЗУП);
		СткЗапроса.ИмяМетода = "GETRABSOTR";
		Если фПервая Тогда
			Тбл = ОбщегоНазначения.ВыполнитьЗапрос(СткЗапроса, ТекстОшибки);
			Если ТБл = 1 Тогда //Ошибка получения данных из ЗУП
				ТекстОшибки = "Невозможно получить данные из " + ХХХ.БазаЗУП.Наименование;
				Возврат Тбл;
			КонецЕсли;	
			фПервая = Ложь;
		Иначе
			Тбл1 = ОбщегоНазначения.ВыполнитьЗапрос(СткЗапроса, ТекстОшибки);
			Если Тбл1 = 1 Тогда //Ошибка получения данных из ЗУП
				ТекстОшибки = "Невозможно получить данные из " + ХХХ.БазаЗУП.Наименование;
				Возврат Тбл1;
			КонецЕсли;	
			Для Каждого стр Из Тбл1 Цикл
				нСтр = Тбл.Добавить();
				ЗаполнитьЗначенияСвойств(нСтр,стр);
			КонецЦикла;	
		КонецЕсли	
	КонецЦикла;
	Возврат Тбл;
КонецФункции

Функция ВывестиТаблицуЗначенийВТабличныйДокумент(Данные)
	Т = Новый ТабличныйДокумент;
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	Линия2 = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ШрифтЖирный = Новый Шрифт(Т.Область(1, 1, 1, 1).Шрифт, , , Истина);
	ШиринаКолонок = Новый Массив;
	Для каждого Колонка из Данные.Колонки Цикл
		ИндексКолонки = 1 + Данные.Колонки.Индекс(Колонка);
		Т.Область(1, ИндексКолонки, 1, ИндексКолонки).Текст = Колонка.Имя;
		Т.Область(1, ИндексКолонки, 1, ИндексКолонки).Шрифт = ШрифтЖирный;
		Т.Область(1, ИндексКолонки, 1, ИндексКолонки).ГраницаСверху = Линия2;
		Т.Область(1, ИндексКолонки, 1, ИндексКолонки).ГраницаСнизу = Линия2;
		Т.Область(1, ИндексКолонки, 1, ИндексКолонки).ГраницаСлева = Линия2;
		Т.Область(1, ИндексКолонки, 1, ИндексКолонки).ГраницаСправа = Линия2;
		ШиринаКолонок.Вставить(ИндексКолонки,СтрДлина(Колонка.Имя));
	КонецЦикла;
	Для каждого СтрокаДанных из Данные Цикл
		ИндексСтроки = 2 + Данные.Индекс(СтрокаДанных);
		Для каждого Колонка из Данные.Колонки Цикл
			ИндексКолонки = 1 + Данные.Колонки.Индекс(Колонка);
			Т.Область(ИндексСтроки,ИндексКолонки,ИндексСтроки,ИндексКолонки).Текст = СтрокаДанных[Колонка.Имя];
			Т.Область(ИндексСтроки,ИндексКолонки,ИндексСтроки,ИндексКолонки).Расшифровка = СтрокаДанных[Колонка.Имя];
			Т.Область(ИндексСтроки,ИндексКолонки,ИндексСтроки,ИндексКолонки).ГраницаСверху = Линия;
			Т.Область(ИндексСтроки,ИндексКолонки,ИндексСтроки,ИндексКолонки).ГраницаСнизу = Линия;
			Т.Область(ИндексСтроки,ИндексКолонки,ИндексСтроки,ИндексКолонки).ГраницаСлева = Линия;
			Т.Область(ИндексСтроки,ИндексКолонки,ИндексСтроки,ИндексКолонки).ГраницаСправа = Линия;
			Если ШиринаКолонок[ИндексКолонки] < СтрДлина(СтрокаДанных[Колонка.Имя]) Тогда
				ШиринаКолонок[ИндексКолонки] = СтрДлина(СокрЛП(СтрокаДанных[Колонка.Имя]));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для каждого Колонка из Данные.Колонки Цикл
		ИндексКолонки = 1 + Данные.Колонки.Индекс(Колонка);
		Т.Область(,ИндексКолонки,,ИндексКолонки).ШиринаКолонки = ШиринаКолонок[ИндексКолонки];
	КонецЦикла;
	Т.ФиксацияСверху = 1;
	Т.ТолькоПросмотр = Истина;
	Возврат Т;
КонецФункции

Функция ВыгрузитьТранспортВСигур(пОрганизация, пСтрокаСоединения, пТаблица, пОшибка)
	мСоединение = Новый ComObject("ADODB.Connection");
	мСоединение.CommandTimeout = 600;
	мСоединение.ConnectionTimeout = 30;
	Попытка
		мСоединение.Open(пСтрокаСоединения);
	Исключение
		пОшибка = "Ошибка соединения с БД MariaDB: " + пСтрокаСоединения;
		Возврат Ложь;
	КонецПопытки;
	
	//получим ID корневой папки сотудников - это элемент с TYPE = 'DEP' и NAME = ... (' + мОрганизация + ')'
	мОшибка = "";
	мПодстрокаПоиска = "Транспортные средства";
	мИдентификаторКорневойГруппы = ПолучитьИдентификаторКорневойГруппы(пОрганизация, мСоединение, мПодстрокаПоиска, мОшибка);
	Если мИдентификаторКорневойГруппы = Неопределено Тогда
		пОшибка = "Ошибка поиска корневой группы: '" + мПодстрокаПоиска + " (" + пОрганизация + ")' в БД Сигур!" + мОшибка;
		Возврат Ложь;
	КонецЕсли;
	мМассивКЗаписи = Новый Массив;
	Для Каждого мСтрока Из пТаблица Цикл
		// 1. Ищем ТС в базе Сигур по УИД
		Если СтатусЗаписи(мСоединение, мСтрока.ГарНомер, мИдентификаторКорневойГруппы) = "" Тогда
			ДобавитьТСВМассивКЗаписи(мСтрока, мМассивКЗаписи);
		КонецЕсли;
	КонецЦикла;
	мРезультатЗаписи = ВнестиЗаписи(мСоединение, мИдентификаторКорневойГруппы, мМассивКЗаписи);
	мСоединение.Close();
	Возврат мРезультатЗаписи;
КонецФункции

Функция ПолучитьИдентификаторКорневойГруппы(пОрганизация, пСоединение, пСтрокаПоиска, пОшибка)
	мСтруктураПолей = Новый Структура("ID, STATUS");
	мСтруктураОтборов = Новый Структура("TYPE, NAME, STATUS", "'DEP'", "'" + пСтрокаПоиска + " (ООО """ + пОрганизация + """)'", "'AVAILABLE'");
	мЗаписи = ПолучитьЗаписиИзСигура(пСоединение, мСтруктураПолей, мСтруктураОтборов);
	Если мЗаписи.Количество() = 1 Тогда
		Возврат Формат(мЗаписи[0]["ID"], "ЧГ=");
	Иначе
		пОшибка = "Найдено " + мЗаписи.Количество() + " записей!";
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ДобавитьСотрудникаВМассивКЗаписи(пСтрока, пМассив)
	мСтруктура = Новый Структура("Наименование, Должность, Код, Статус", пСтрока.ФИО, пСтрока.Должность, СокрЛП(пСтрока.ТабельныйНомер), ?(ЗначениеЗаполнено(пСтрока.ДатаУвольнения), "FIRED", "AVAILABLE"));
	пМассив.Добавить(мСтруктура);
КонецПроцедуры

Процедура ДобавитьТСВМассивКЗаписи(пСтрока, пМассив)
	мСтруктура = Новый Структура("Наименование, Должность, Код, Статус", пСтрока.ИмяТС + " (" + СокрЛП(пСтрока.ГосНомер) + ")", пСтрока.ИмяТС + " (" + СокрЛП(пСтрока.ГосНомер) + ")", СокрЛП(пСтрока.ГарНомер), "AVAILABLE");
	пМассив.Добавить(мСтруктура);
КонецПроцедуры

Функция ВнестиЗаписи(пСоединение, пКодГруппы, пМассивСтрок)
	Если пМассивСтрок.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	вРезультат = Ложь;
	мТекстЗапроса = "insert into personal (PARENT_ID, TYPE, EMP_TYPE, NAME, POS, TABID, STATUS)
	|values ";
	Для Каждого мСтрока Из пМассивСтрок Цикл
		мТекстЗапроса = мТекстЗапроса + "(" + пКодГруппы + ", 'EMP','EMP', '" + мСтрока.Наименование + "', '" + мСтрока.Должность + "', " + мСтрока.Код + ", '" + мСтрока.Статус + "')," + Символы.ПС;
	КонецЦикла;
	мТекстЗапроса = Лев(мТекстЗапроса, СтрДлина(мТекстЗапроса) - 2);
	
	мКоманда = Новый ComObject("ADODB.Command");
	мКоманда.ActiveConnection = пСоединение;
	мКоманда.CommandText = мТекстЗапроса;
	мКоманда.Execute();
	
	вРезультат = Истина;
	Возврат вРезультат;
КонецФункции

Процедура ОбновитьЗапись(пСоединение, пТабИд, пГруппа, пСтруктураОбновления)
	мСтрокаОбновляемыхПолей = "";
	Для Каждого мПоле Из пСтруктураОбновления Цикл
		мСтрокаОбновляемыхПолей = мСтрокаОбновляемыхПолей + мПоле.Ключ + " = " + мПоле.Значение + ",";
	КонецЦикла;
	мСтрокаОбновляемыхПолей = Лев(мСтрокаОбновляемыхПолей, СтрДлина(мСтрокаОбновляемыхПолей) - 1);
	Если мСтрокаОбновляемыхПолей = "" Тогда
		Возврат;
	КонецЕсли;
	мТекстЗапроса = "UPDATE personal SET " + мСтрокаОбновляемыхПолей + " where PARENT_ID = " + пГруппа + " AND TABID = '" + пТабИд + "' AND TYPE = 'EMP';";
	мКоманда = Новый ComObject("ADODB.Command");
	мКоманда.ActiveConnection = пСоединение;
	мКоманда.CommandText = мТекстЗапроса;
	мКоманда.Execute();
КонецПроцедуры

Функция ВыгрузитьСотрудниковВСигур(пОрганизация, пСтрокаСоединения, пТаблица, пОшибка)
	мСоединение = Новый ComObject("ADODB.Connection");
	мСоединение.CommandTimeout = 600;
	мСоединение.ConnectionTimeout = 30;
	Попытка
		мСоединение.Open(пСтрокаСоединения);
	Исключение
		пОшибка = "Ошибка соединения с БД MariaDB: " + пСтрокаСоединения;
		Возврат Ложь;
	КонецПопытки;
	
	//получим ID корневой папки сотудников - это элемент с TYPE = 'DEP' и NAME = ... (' + мОрганизация + ')'
	мОшибка = "";
	мПодстрокаПоиска = "Сотрудники";
	мИдентификаторКорневойГруппы = ПолучитьИдентификаторКорневойГруппы(пОрганизация, мСоединение, мПодстрокаПоиска, мОшибка);
	Если мИдентификаторКорневойГруппы = Неопределено Тогда
		пОшибка = "Ошибка поиска корневой группы: '" + мПодстрокаПоиска + " (" + пОрганизация + ")' в БД Сигур!" + мОшибка;
		Возврат Ложь;
	КонецЕсли;
	мМассивКЗаписи = Новый Массив;
	Для Каждого мСтрока Из пТаблица Цикл
		// 1. Ищем сотрудника в базе Сигур по УИД
		мСтатусЗаписи = СтатусЗаписи(мСоединение, мСтрока.ТабельныйНомер, мИдентификаторКорневойГруппы);
		Если мСтатусЗаписи <> "" И мСтатусЗаписи <> ?(ЗначениеЗаполнено(мСтрока.ДатаУвольнения), "FIRED", "AVAILABLE") Тогда
			мСтруктураОбновления = Новый Структура("STATUS", ?(ЗначениеЗаполнено(мСтрока.ДатаУвольнения), "'FIRED'", "'AVAILABLE'"));
			ОбновитьЗапись(мСоединение, мСтрока.ТабельныйНомер, мИдентификаторКорневойГруппы, мСтруктураОбновления);
		ИначеЕсли мСтатусЗаписи = "" Тогда
			ДобавитьСотрудникаВМассивКЗаписи(мСтрока, мМассивКЗаписи);
		КонецЕсли;
	КонецЦикла;
	мРезультатЗаписи = ВнестиЗаписи(мСоединение, мИдентификаторКорневойГруппы, мМассивКЗаписи);
	//мТекстЗапроса = "select
	//|    pt.name name,
	//|    pt.TABID tabid
	//|from `tc-db-main`.personal pt
	//|where true;";
	//
	//мНаборЗаписей = Новый ComObject("ADODB.RecordSet");
	//мНаборЗаписей.Open(мТекстЗапроса, мСоединение);
	//мЧтениеПроизведено = Ложь;
	//мТабельныйНомер = "";
	//мИмяСотрудника = "";
	//вСоответствие = Новый Соответствие;
	//Пока мНаборЗаписей.EOF() = 0 Цикл
	//	мИмяСотрудника = СокрЛП(мНаборЗаписей.Fields("name").Value);
	//	мТабельныйНомер = СокрЛП(мНаборЗаписей.Fields("tabid").Value);
	//	мЧтениеПроизведено = Истина;
	//	Если ЗначениеЗаполнено(мТабельныйНомер) И ЗначениеЗаполнено(мИмяСотрудника) Тогда
	//		вСоответствие.Вставить(мТабельныйНомер, мИмяСотрудника);
	//	КонецЕсли;
	//	мНаборЗаписей.MoveNext();
	//КонецЦикла;
	//мНаборЗаписей.Close();
	мСоединение.Close();
	Возврат мРезультатЗаписи;
КонецФункции

Функция ПолучитьЗаписиИзСигура(пСоединение, пСтруктураПолей, пСтруктураОтборов)
	вРезультат = Новый Массив;
	мСтрокаИменПолей = "";
	мСтрокаИменПолейРезультата = "";
	мСтрокаОтборов = "";
	Для Каждого мПоле Из пСтруктураПолей Цикл
		мСтрокаИменПолей = мСтрокаИменПолей + "PersonalTable." + мПоле.Ключ + " AS " + мПоле.Ключ + ",";
		мСтрокаИменПолейРезультата = мСтрокаИменПолейРезультата + мПоле.Ключ + ",";
	КонецЦикла;
	Для Каждого мОтбор Из пСтруктураОтборов Цикл
		мСтрокаОтборов = мСтрокаОтборов + "PersonalTable." + мОтбор.Ключ + ?(Найти(мОтбор.Ключ, "(") > 0, " IN ", " = ") + мОтбор.Значение + " AND ";
	КонецЦикла;
	мСтрокаИменПолей = Лев(мСтрокаИменПолей, СтрДлина(мСтрокаИменПолей) - 1);	//отрезаем последнюю запятую
	мСтрокаИменПолейРезультата = Лев(мСтрокаИменПолейРезультата, СтрДлина(мСтрокаИменПолейРезультата) - 1);
	мСтрокаОтборов = Лев(мСтрокаОтборов, СтрДлина(мСтрокаОтборов) - 5);
	мТекстЗапроса = "select
	|    " + мСтрокаИменПолей + "
	|from `tc-db-main`.personal PersonalTable
	|where " + мСтрокаОтборов + ";";
	мНаборЗаписей = Новый ComObject("ADODB.RecordSet");
	мНаборЗаписей.Open(мТекстЗапроса, пСоединение);
	мЧтениеПроизведено = Ложь;
	мТабельныйНомер = "";
	мИмяСотрудника = "";
	вСоответствие = Новый Соответствие;
	Пока мНаборЗаписей.EOF() = 0 Цикл
		мСтруктураЗаписи = Новый Структура(мСтрокаИменПолейРезультата);
		Для Каждого мЗапись Из мСтруктураЗаписи Цикл
			мСтруктураЗаписи.Вставить(мЗапись.Ключ, ПреобразоватьЗначениеПоля(мНаборЗаписей.Fields(мЗапись.Ключ)));
		КонецЦикла;
		вРезультат.Добавить(мСтруктураЗаписи);
		мНаборЗаписей.MoveNext();
	КонецЦикла;
	мНаборЗаписей.Close();
	Возврат вРезультат;
КонецФункции

Функция ПреобразоватьЗначениеПоля(пПоле)
	Если пПоле.Type <=3 Тогда
		Возврат Число(пПоле.Value);
	ИначеЕсли пПоле.Type >= 130 Тогда
		Возврат СокрЛП(пПоле.Value);
	ИначеЕсли пПоле.Type = 11 Тогда
		Возврат Булево(пПоле.Value);
	Иначе
		Возврат СокрЛП(пПоле.Value);
	КонецЕсли;
КонецФункции

Функция СтатусЗаписи(пСоединениеСигур, пТабельный, пРодитель)
	вРезультат = "";
	мТекстЗапроса = "select
	|    PersonalTable.ID AS ID,
	|    PersonalTable.NAME as NAME,
	|    PersonalTable.PARENT_ID as PARENT_ID,
	|    PersonalTable.TABID as TABID,
	|    PersonalTable.TYPE as TYPE,
	|    PersonalTable.STATUS as STATUS
	|from `tc-db-main`.personal PersonalTable
	|where PersonalTable.TABID = '###' AND PersonalTable.PARENT_ID = @@@ LIMIT 1;";
	мТекстЗапроса = СтрЗаменить(мТекстЗапроса, "###", СокрЛП(пТабельный));
	мТекстЗапроса = СтрЗаменить(мТекстЗапроса, "@@@", пРодитель);
	мНаборЗаписей = Новый ComObject("ADODB.RecordSet");
	мНаборЗаписей.Open(мТекстЗапроса, пСоединениеСигур);
	мЧтениеПроизведено = Ложь;
	мТабельныйНомер = "";
	мИмяСотрудника = "";
	вСоответствие = Новый Соответствие;
	Если мНаборЗаписей.EOF() = 0 Тогда
		вРезультат = СокрЛП(мНаборЗаписей.Fields("STATUS").Value);
	КонецЕсли;
	мНаборЗаписей.Close();
	Возврат вРезультат;
КонецФункции