// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
// рекомендуется использовать функцию платформы СтрРазделить.
//
// Параметры:
//  Значение               - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",")
//  - возвратит массив из 5 элементов, три из которых  - пустые: "", "один", "", "два", "";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина)
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" один   два  ", " ")
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("")
//  - возвратит пустой массив;
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("",,Ложь)
//  - возвратит массив с одним элементом: ""(пустая строка);
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("", " ")
//  - возвратит массив с одним элементом: "" (пустая строка).
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ВыполнитьЗапрос(СткЗапроса,ОшибкаHTTP = "") Экспорт
	Соединение = Новый HTTPСоединение(
									СткЗапроса.АдресСервера, 			// сервер (хост)
									80, 					// порт, по умолчанию для http используется 80, для https 443
									СткЗапроса.Логин, 		// пользователь для доступа к серверу (если он есть) 
									СткЗапроса.Пароль,	 	// пароль для доступа к серверу (если он есть) 
									, 						// здесь указывается прокси, если он есть
									, 						// таймаут в секундах, 0 или пусто - не устанавливать
															// защищенное соединение, если используется https
									);
									
	ТекстЗапроса ="/" + СткЗапроса.НаименованиеБазы + "/hs/"+ СткЗапроса.АПИ + "/" + СткЗапроса.ИмяМетода;
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
	
	Попытка
		Ответ = Соединение.Получить(Запрос);
		КодСостояния = Ответ.КодСостояния;
		Если КодСостояния = 200 Тогда
			Попытка
				ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
				Тбл = XMLЗначение(Тип("ХранилищеЗначения"),ТелоОтвета).Получить();
				Возврат Тбл;
			Исключение
				ОшибкаHTTP = "Ошибка HTTP-запроса. Невозможно получить данные из тела ответа. " + Строка(ИнформацияОбОшибке().Описание);
				Возврат 1;
			КонецПопытки;
		Иначе
			ОшибкаHTTP = "Ошибка HTTP-запроса. Код состояния = " + КодСостояния;
			Возврат 1;
		КонецЕсли;	
	Исключение
		ОшибкаHTTP = "Ошибка HTTP-запроса. Невозможно отправить запрос на адрес сервера. " + Строка(ИнформацияОбОшибке().Описание);
		Возврат 1;
	КонецПопытки;	
	
	
КонецФункции

Функция ПолучитьСткЗапроса() Экспорт
	Возврат Новый Структура("АдресСервера,НаименованиеБазы,Логин,Пароль,АПИ,ИмяМетода,ИНН");
КонецФункции

Функция ПолучитьКадрТбл(СткЗапроса,ОшибкаHTTP = "") Экспорт
	СтруктураПараметров = Новый Структура; // Все параметры необязательные, но если не задать ИНН организации ==> ответ пустой
	СтруктураПараметров.Вставить("ИННОрганизации",СткЗапроса.ИНН); 
	
	// Работавшие за период:
	СтруктураПараметров.Вставить("НачПериода",ТекущаяДата());
	СтруктураПараметров.Вставить("КонПериода",ТекущаяДата()); // срез данных всегда ведётся на КонПериода
	
	//СтруктураПараметров.Вставить("Категории","Водители и механизаторы");
	//СтруктураПараметров.Вставить("Категории","Руководители, Специалисты,Рабочие"); // можно через запятую
	
	Соединение1С82 = Новый HTTPСоединение(СткЗапроса.АдресСервера,80,СткЗапроса.Логин,СткЗапроса.Пароль);
	
	Body = XMLСтрока(Новый ХранилищеЗначения(СтруктураПараметров, Новый СжатиеДанных(-1)));
	
	Запрос = Новый HTTPЗапрос("/" + СткЗапроса.НаименованиеБазы + "/hs/" + СткЗапроса.АПИ + "/GETRABSOTR");
	
	Запрос.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	Запрос.УстановитьТелоИзСтроки(Body);
	Попытка
		Ответ = Соединение1С82.ОтправитьДляОбработки(Запрос);
		КодСостояния = Ответ.КодСостояния;
		Если КодСостояния = "200" или КодСостояния = 200 Тогда
			Попытка
				Body = Ответ.ПолучитьТелоКакСтроку();
				ХЗ = XMLЗначение(Тип("ХранилищеЗначения"),Body);
				Возврат ХЗ.Получить();
			Исключение
				ОшибкаHTTP = "Ошибка HTTP-запроса. Невозможно получить данные из тела ответа. " + Строка(ИнформацияОбОшибке().Описание);
				Возврат 1;
			КонецПопытки;
		Иначе
			ОшибкаHTTP = "Ошибка HTTP-запроса. Код состояния = " + КодСостояния;
			Возврат 1;
		КонецЕсли;
	Исключение
		ОшибкаHTTP = "Ошибка HTTP-запроса. Невозможно отправить запрос на адрес сервера. " + Строка(ИнформацияОбОшибке().Описание);
		Возврат 1;
	КонецПопытки;	
	
КонецФункции

Функция СткПолучитьСоединениеАЗУР() Экспорт
    Стк = Новый Структура();
    Стк.Вставить("Сервер","azure1c.westeurope.cloudapp.azure.com");
    Стк.Вставить("Порт",80);
    Стк.Вставить("Логин","Serv");
    Стк.Вставить("Пароль","SERVgfhjkm");
    Возврат Стк;
КонецФункции

Функция ПереслатьПочтуАЗУР(Получатель,Отправитель = Неопределено,Пароль = Неопределено,Тема,Текст,ПутьВложения="",Копии="",ИмяФайла="",ОшибкаHTTP = "") Экспорт
	Стк = Новый Структура();
	Стк.Вставить("емайл",Получатель);
	Стк.Вставить("Отправитель",Отправитель);
	Стк.Вставить("Пароль",Пароль);
	Стк.Вставить("Заголовок",Тема);
	Стк.Вставить("Текст",Текст);
	Стк.Вставить("ИмяФайла",ИмяФайла);
	Если ТипЗнч(ПутьВложения) = Тип("ДвоичныеДанные") Тогда
		Стк.Вставить("ДвоичныеДанныеФайла",ПутьВложения);
	КонецеСЛИ;
	
	Прокси = Неопределено;
	СткСоединение = СткПолучитьСоединениеАЗУР();
	Соединение = Новый HTTPСоединение(
    					СткСоединение.Сервер, // сервер (хост)
    					СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
					    , // пользователь для доступа к серверу (если он есть)
    					, // пароль для доступа к серверу (если он есть)
    					Прокси, // здесь указывается прокси, если он есть
    					, // таймаут в секундах, 0 или пусто - не устанавливать
    					// защищенное соединение, если используется https
    					);
    
	Запрос = Новый HTTPЗапрос("/ServiceMP/hs/ksAPI/SENDMAIL");
	
	Хранилище = Новый ХранилищеЗначения(Стк, Новый СжатиеДанных(3));
	Запрос.УстановитьТелоИзСтроки(XMLСтрока(Хранилище));
	
	Попытка
		Ответ = Соединение.Записать(Запрос);
		КодСостояния = Ответ.КодСостояния;
		Если КодСостояния < 200 или КодСостояния>210 Тогда 
			ОшибкаHTTP = "Ошибка HTTP-запроса. Код состояния = " + КодСостояния;
			Возврат 1;
		КонецЕСЛИ;
	Исключение
		ОшибкаHTTP = "Ошибка HTTP-запроса. Невозможно отправить запрос на адрес сервера. " + Строка(ИнформацияОбОшибке().Описание);
		Возврат 1;
	КонецПопытки;	
	
	Возврат 0;
КонецФункции

Функция Регл_ОбработкаСпискаПользователей() Экспорт
	Обр = Обработки.РаботаСоСпискомПользователей;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеБазы.Ссылка КАК ИнформационнаяБаза
		|ИЗ
		|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
		|ГДЕ
		|	ИнформационныеБазы.ФлагОбрабатывать = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнформационныеБазы.Наименование
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Обр.ВыполнитьОбработкуИБ(Выборка.ИнформационнаяБаза);
	КонецЦикла;
КонецФункции	
